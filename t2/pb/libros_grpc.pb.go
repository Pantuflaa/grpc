// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LibrosClient is the client API for Libros service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrosClient interface {
	GuardarLibro(ctx context.Context, opts ...grpc.CallOption) (Libros_GuardarLibroClient, error)
	RecibirChunk(ctx context.Context, opts ...grpc.CallOption) (Libros_RecibirChunkClient, error)
	EscribemeLibro(ctx context.Context, in *Escritura, opts ...grpc.CallOption) (*Mensaje, error)
	ListadoLibro(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (Libros_ListadoLibroClient, error)
	DameNodos(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	DescargarLibro(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (Libros_DescargarLibroClient, error)
	Propuesta(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*RespPropuesta, error)
	PropuestaDist(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*RespPropuesta, error)
	EscribimeLibroDist(ctx context.Context, in *Escritura, opts ...grpc.CallOption) (*Mensaje, error)
	Ricart(ctx context.Context, in *EYR, opts ...grpc.CallOption) (*EYR, error)
	PedirLibro(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	Vivo(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
}

type librosClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrosClient(cc grpc.ClientConnInterface) LibrosClient {
	return &librosClient{cc}
}

func (c *librosClient) GuardarLibro(ctx context.Context, opts ...grpc.CallOption) (Libros_GuardarLibroClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Libros_serviceDesc.Streams[0], "/pb.Libros/GuardarLibro", opts...)
	if err != nil {
		return nil, err
	}
	x := &librosGuardarLibroClient{stream}
	return x, nil
}

type Libros_GuardarLibroClient interface {
	Send(*ChunkLibro) error
	CloseAndRecv() (*Mensaje, error)
	grpc.ClientStream
}

type librosGuardarLibroClient struct {
	grpc.ClientStream
}

func (x *librosGuardarLibroClient) Send(m *ChunkLibro) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librosGuardarLibroClient) CloseAndRecv() (*Mensaje, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Mensaje)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librosClient) RecibirChunk(ctx context.Context, opts ...grpc.CallOption) (Libros_RecibirChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Libros_serviceDesc.Streams[1], "/pb.Libros/RecibirChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &librosRecibirChunkClient{stream}
	return x, nil
}

type Libros_RecibirChunkClient interface {
	Send(*ChunkLibro) error
	CloseAndRecv() (*Mensaje, error)
	grpc.ClientStream
}

type librosRecibirChunkClient struct {
	grpc.ClientStream
}

func (x *librosRecibirChunkClient) Send(m *ChunkLibro) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librosRecibirChunkClient) CloseAndRecv() (*Mensaje, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Mensaje)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librosClient) EscribemeLibro(ctx context.Context, in *Escritura, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/pb.Libros/EscribemeLibro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) ListadoLibro(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (Libros_ListadoLibroClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Libros_serviceDesc.Streams[2], "/pb.Libros/ListadoLibro", opts...)
	if err != nil {
		return nil, err
	}
	x := &librosListadoLibroClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Libros_ListadoLibroClient interface {
	Recv() (*Mensaje, error)
	grpc.ClientStream
}

type librosListadoLibroClient struct {
	grpc.ClientStream
}

func (x *librosListadoLibroClient) Recv() (*Mensaje, error) {
	m := new(Mensaje)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librosClient) DameNodos(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/pb.Libros/DameNodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) DescargarLibro(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (Libros_DescargarLibroClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Libros_serviceDesc.Streams[3], "/pb.Libros/DescargarLibro", opts...)
	if err != nil {
		return nil, err
	}
	x := &librosDescargarLibroClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Libros_DescargarLibroClient interface {
	Recv() (*ChunkLibro, error)
	grpc.ClientStream
}

type librosDescargarLibroClient struct {
	grpc.ClientStream
}

func (x *librosDescargarLibroClient) Recv() (*ChunkLibro, error) {
	m := new(ChunkLibro)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librosClient) Propuesta(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*RespPropuesta, error) {
	out := new(RespPropuesta)
	err := c.cc.Invoke(ctx, "/pb.Libros/Propuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) PropuestaDist(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*RespPropuesta, error) {
	out := new(RespPropuesta)
	err := c.cc.Invoke(ctx, "/pb.Libros/PropuestaDist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) EscribimeLibroDist(ctx context.Context, in *Escritura, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/pb.Libros/EscribimeLibroDist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) Ricart(ctx context.Context, in *EYR, opts ...grpc.CallOption) (*EYR, error) {
	out := new(EYR)
	err := c.cc.Invoke(ctx, "/pb.Libros/Ricart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) PedirLibro(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/pb.Libros/PedirLibro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librosClient) Vivo(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/pb.Libros/Vivo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrosServer is the server API for Libros service.
// All implementations must embed UnimplementedLibrosServer
// for forward compatibility
type LibrosServer interface {
	GuardarLibro(Libros_GuardarLibroServer) error
	RecibirChunk(Libros_RecibirChunkServer) error
	EscribemeLibro(context.Context, *Escritura) (*Mensaje, error)
	ListadoLibro(*Mensaje, Libros_ListadoLibroServer) error
	DameNodos(context.Context, *Mensaje) (*Mensaje, error)
	DescargarLibro(*Mensaje, Libros_DescargarLibroServer) error
	Propuesta(context.Context, *Mensaje) (*RespPropuesta, error)
	PropuestaDist(context.Context, *Mensaje) (*RespPropuesta, error)
	EscribimeLibroDist(context.Context, *Escritura) (*Mensaje, error)
	Ricart(context.Context, *EYR) (*EYR, error)
	PedirLibro(context.Context, *Mensaje) (*Mensaje, error)
	Vivo(context.Context, *Mensaje) (*Mensaje, error)
	mustEmbedUnimplementedLibrosServer()
}

// UnimplementedLibrosServer must be embedded to have forward compatible implementations.
type UnimplementedLibrosServer struct {
}

func (UnimplementedLibrosServer) GuardarLibro(Libros_GuardarLibroServer) error {
	return status.Errorf(codes.Unimplemented, "method GuardarLibro not implemented")
}
func (UnimplementedLibrosServer) RecibirChunk(Libros_RecibirChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method RecibirChunk not implemented")
}
func (UnimplementedLibrosServer) EscribemeLibro(context.Context, *Escritura) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscribemeLibro not implemented")
}
func (UnimplementedLibrosServer) ListadoLibro(*Mensaje, Libros_ListadoLibroServer) error {
	return status.Errorf(codes.Unimplemented, "method ListadoLibro not implemented")
}
func (UnimplementedLibrosServer) DameNodos(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DameNodos not implemented")
}
func (UnimplementedLibrosServer) DescargarLibro(*Mensaje, Libros_DescargarLibroServer) error {
	return status.Errorf(codes.Unimplemented, "method DescargarLibro not implemented")
}
func (UnimplementedLibrosServer) Propuesta(context.Context, *Mensaje) (*RespPropuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propuesta not implemented")
}
func (UnimplementedLibrosServer) PropuestaDist(context.Context, *Mensaje) (*RespPropuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropuestaDist not implemented")
}
func (UnimplementedLibrosServer) EscribimeLibroDist(context.Context, *Escritura) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscribimeLibroDist not implemented")
}
func (UnimplementedLibrosServer) Ricart(context.Context, *EYR) (*EYR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ricart not implemented")
}
func (UnimplementedLibrosServer) PedirLibro(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedirLibro not implemented")
}
func (UnimplementedLibrosServer) Vivo(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vivo not implemented")
}
func (UnimplementedLibrosServer) mustEmbedUnimplementedLibrosServer() {}

// UnsafeLibrosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrosServer will
// result in compilation errors.
type UnsafeLibrosServer interface {
	mustEmbedUnimplementedLibrosServer()
}

func RegisterLibrosServer(s *grpc.Server, srv LibrosServer) {
	s.RegisterService(&_Libros_serviceDesc, srv)
}

func _Libros_GuardarLibro_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrosServer).GuardarLibro(&librosGuardarLibroServer{stream})
}

type Libros_GuardarLibroServer interface {
	SendAndClose(*Mensaje) error
	Recv() (*ChunkLibro, error)
	grpc.ServerStream
}

type librosGuardarLibroServer struct {
	grpc.ServerStream
}

func (x *librosGuardarLibroServer) SendAndClose(m *Mensaje) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librosGuardarLibroServer) Recv() (*ChunkLibro, error) {
	m := new(ChunkLibro)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Libros_RecibirChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrosServer).RecibirChunk(&librosRecibirChunkServer{stream})
}

type Libros_RecibirChunkServer interface {
	SendAndClose(*Mensaje) error
	Recv() (*ChunkLibro, error)
	grpc.ServerStream
}

type librosRecibirChunkServer struct {
	grpc.ServerStream
}

func (x *librosRecibirChunkServer) SendAndClose(m *Mensaje) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librosRecibirChunkServer) Recv() (*ChunkLibro, error) {
	m := new(ChunkLibro)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Libros_EscribemeLibro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Escritura)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).EscribemeLibro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/EscribemeLibro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).EscribemeLibro(ctx, req.(*Escritura))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_ListadoLibro_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Mensaje)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrosServer).ListadoLibro(m, &librosListadoLibroServer{stream})
}

type Libros_ListadoLibroServer interface {
	Send(*Mensaje) error
	grpc.ServerStream
}

type librosListadoLibroServer struct {
	grpc.ServerStream
}

func (x *librosListadoLibroServer) Send(m *Mensaje) error {
	return x.ServerStream.SendMsg(m)
}

func _Libros_DameNodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).DameNodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/DameNodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).DameNodos(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_DescargarLibro_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Mensaje)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrosServer).DescargarLibro(m, &librosDescargarLibroServer{stream})
}

type Libros_DescargarLibroServer interface {
	Send(*ChunkLibro) error
	grpc.ServerStream
}

type librosDescargarLibroServer struct {
	grpc.ServerStream
}

func (x *librosDescargarLibroServer) Send(m *ChunkLibro) error {
	return x.ServerStream.SendMsg(m)
}

func _Libros_Propuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).Propuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/Propuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).Propuesta(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_PropuestaDist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).PropuestaDist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/PropuestaDist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).PropuestaDist(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_EscribimeLibroDist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Escritura)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).EscribimeLibroDist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/EscribimeLibroDist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).EscribimeLibroDist(ctx, req.(*Escritura))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_Ricart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EYR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).Ricart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/Ricart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).Ricart(ctx, req.(*EYR))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_PedirLibro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).PedirLibro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/PedirLibro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).PedirLibro(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libros_Vivo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrosServer).Vivo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Libros/Vivo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrosServer).Vivo(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

var _Libros_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Libros",
	HandlerType: (*LibrosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EscribemeLibro",
			Handler:    _Libros_EscribemeLibro_Handler,
		},
		{
			MethodName: "DameNodos",
			Handler:    _Libros_DameNodos_Handler,
		},
		{
			MethodName: "Propuesta",
			Handler:    _Libros_Propuesta_Handler,
		},
		{
			MethodName: "PropuestaDist",
			Handler:    _Libros_PropuestaDist_Handler,
		},
		{
			MethodName: "EscribimeLibroDist",
			Handler:    _Libros_EscribimeLibroDist_Handler,
		},
		{
			MethodName: "Ricart",
			Handler:    _Libros_Ricart_Handler,
		},
		{
			MethodName: "PedirLibro",
			Handler:    _Libros_PedirLibro_Handler,
		},
		{
			MethodName: "Vivo",
			Handler:    _Libros_Vivo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GuardarLibro",
			Handler:       _Libros_GuardarLibro_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecibirChunk",
			Handler:       _Libros_RecibirChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListadoLibro",
			Handler:       _Libros_ListadoLibro_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DescargarLibro",
			Handler:       _Libros_DescargarLibro_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "libros.proto",
}
